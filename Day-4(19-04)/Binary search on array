Problem link:-  https://www.hackerrank.com/contests/smart-interviews-basic/challenges/si-basic-binary-search-on-array


Solution :- 1
Language :- JAVA
Description :- Recursive Method

Code:-

public class Solution {
    public static boolean binarySearch(int arr[] ,int key,int low,int high){
        if(low>high)
            return false;
        int mid=(low+high)/2;
        if(arr[mid]==key)
            return true;
        if(arr[mid]>key)
            return binarySearch(arr,key,low,mid-1);
        else
            return binarySearch(arr,key,mid+1,high);
    }

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        int key=sc.nextInt();
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        Arrays.sort(arr); //sorting
        System.out.println(binarySearch(arr,key,0,n-1));
    }
}


Complexity :- NlogN(sorting) + log(N)(binarySearch),O(1).
--------------------------------------------------------------------------------------------------------------

Solution :- 2
Language :- JAVA
Description :- Iterative code.

Code:-
public class Solution {
    public static boolean binarySearch(int arr[] ,int key,int low,int high){
       while(low<=high){
           int mid=(low+high)/2;
           if(arr[mid]==key)
               return true;
           if(arr[mid]>key)
               high=mid-1;
           else
               low=mid+1;
       }
        return false;
    }

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        int key=sc.nextInt();
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        Arrays.sort(arr);
        System.out.println(binarySearch(arr,key,0,n-1));
    }
}

Complexity :- NlogN(sorting) + log(N)(binarySearch),O(1).