Problem Link:- https://www.hackerrank.com/contests/smart-interviews/challenges/si-depth-of-tree-nodes/problem

Solution:- 



import java.io.*;
import java.util.*;
class Node{
        int data;
        Node left,right;
        Node(int data){
            this.data=data;
        }
    }
class BinarySearchTree{
    public static Node insert(Node root,int data){
        if(root==null)
            return new Node(data);
        else if(data<root.data){
            root.left=insert(root.left,data);
        }
        else{
            root.right=insert(root.right,data);
        }
        return root;
    }
    public static int  depth(Node root,int ele,int value){
        if(root==null)
            return value;
        
        if(root.data==ele)
            return value;
        else if(ele<root.data){
            return depth(root.left,ele,value+1);
        }
        else{
            return depth(root.right,ele,value+1);
        }
       
    }
 
}

public class Solution {
    public static void main(String[] args) {    
        Scanner sc=new Scanner(System.in);
        int t=sc.nextInt();
        while(t-->0){
            int n=sc.nextInt();
            Node root=null;
            BinarySearchTree list1=new BinarySearchTree();
            int arr[]=new int[n];
            for(int i=0;i<n;i++){
                arr[i]=sc.nextInt();
                root=list1.insert(root,arr[i]);
            }
                
            
           for(int i=0;i<n;i++){
               System.out.print(list1.depth(root,arr[i],0)+" ");
           } 
           
            System.out.println();
        }    
    }
}